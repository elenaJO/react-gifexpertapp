{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cAAoB,EAGdC,mBAAS,IAHK,mBAG3CC,EAH2C,KAG/BC,EAH+B,KAmBlD,OACC,sBAAMC,SAXc,SAACC,GAErBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKf,SACC,uBACCO,KAAK,OACLC,MAAQT,EACRU,SAnBsB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,QCPZG,EAAc,SAAC,GAAsB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAExC,OACC,sBAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCNKK,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfN,EADe,0FAC0EO,UAAUF,GADpF,sBAEFG,MAAMR,GAFJ,cAEfS,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QARf,kBAYdY,GAZc,4CAAH,sDCGNK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACfrB,mBAAS,CAClC2B,KAAM,GACNO,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OAVAC,qBAAU,WACTjB,EAAOC,GACLiB,MAAK,SAAAC,GACLH,EAAS,CACRT,KAAMY,EACNL,SAAS,SAGV,CAACb,IAEGc,EDd2BK,CAAanB,GAAjCU,EAF0B,EAEhCJ,KAAcO,EAFkB,EAElBA,QAEtB,OACC,qCACA,6BAAMb,IACJa,GAAW,4CACb,qBAAKjB,UAAU,YAAf,SAEEc,EAAOF,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADCA,EAAIhB,aE8BD2B,EAzCM,WAAM,MAQUzC,mBAAS,CAAC,cARpB,mBAQnB0C,EARmB,KAQP3C,EARO,KAsB1B,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEE2C,EAAWb,KAAI,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAECA,SAAWA,GADLA,YC9BbsB,IAASC,OAAQ,cAAC,EAAD,IACfC,SAASC,eAAe,W","file":"static/js/main.e844b117.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories }) => {\n\t// para guardar lo que escribo tiene q ver un estado\n\t// si no pones nada te da error ya que es como si comenzara undefined\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputValue = (e) => {\n\t\tsetInputValue(e.target.value);\n\t}\n\n\tconst handleSubmit = (e) => {\n\t\t//para que no recargue la pantalla\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 2) {\n\t\t\t// no es necesario pasar las categoorias por q es un callback osea que tiene el valor del estado anterior de las categorias.\n\t\t\tsetCategories(cats => [inputValue, ...cats]);\n\t\t\tsetInputValue('');\n\t\t}\n\t}\n\n\treturn (\n\t\t<form onSubmit={ handleSubmit }>\n\t\t\t<input \n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={ inputValue }\n\t\t\t\tonChange={ handleInputValue }\n\t\t\t/>\n\t\t</form>\n\t)\n}\n\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url}) => {\n\t// como trabajamos con js para q no se confunda con class de clase se le puso className\n\treturn (\n\t\t<div className=\"card animate__animated animate__fadeIn\">\n\t\t\t<img src={ url } alt={ title }/>\n\t\t\t<p>{ title }</p>\n\t\t</div>\n\t)\n}\n","\nexport const getGif = async(category) => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?api_key=Nu3Nq1zEKjSsHDKK1LtgR5hy9xyNAcou&q=${encodeURI(category)}&limit=10`;\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json();\n\tconst gifs = data.map( img => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t};\n\t})\n\t// como es async devuelve una promesa q resulve la coleccio de mis imagenes\n\treturn gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t<h3>{ category }</h3>\n\t\t{ loading && <p>Cargando...</p> }\n\t\t<div className=\"card-grid\">\n\t\t\t{\n\t\t\t\timages.map(img => (\n\t\t\t\t\t<GifGridItem \n\t\t\t\t\t\tkey={ img.id }\n\t\t\t\t\t\t{ ...img }\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t\t</>\n\t)\n}\n","// los useEffect no puede sera async asincronos podemos poner then.\nimport { useState, useEffect } from 'react'\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\tconst [state, setstate] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGif(category)\n\t\t\t.then(imgs => {\n\t\t\t\tsetstate({\n\t\t\t\t\tdata: imgs,\n\t\t\t\t\tloading: false,\n\t\t\t\t});\n\t\t\t})\n\t}, [category]);\n\n\treturn state;\n}\n","//snipet rafc y tab\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\t// asi no se hace por q si quiero agregar o cambiar react no tiene manera de saberlo para eso se usa los hooks\n\t// const categories = ['One Punch', 'Samura X', 'Dragon ball'];\n\n\t// useState recibe un parámetro: el valor inicial del estado (que será ['One Punch', 'Samura X', 'Dragon ball'])\n  // y devuelve un array de dos posiciones:\n  //  la primera (categories), tiene el valor del estado\n  //  la segunda (setCategories), el método para actualizar el estado\n\tconst [categories, setCategories] = useState(['One Punch']);\n\n\t// const handleAdd = () => {\n\t// \t// setCategories([ ...categories, 'game']);\n\n\t// \t// tmb un callback q es el estado anterior\n\t// \tsetCategories(cat => [...categories, 'game']);\n\t// }\n\n\n\t// como props tmb le puedo pasar una funcion la referencia\n\n\n\t//custom hooks -> logica que quiro extraer y reutilzar, son como funcional compoenentes puedes tener states, reducer , components, preferible que su nombre empieze con use\n\treturn (\n\t\t<>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={ setCategories }/>\n\t\t\t<hr/>\n\t\t\t{/* <button onClick={ handleAdd }>Agregar</button> */}\n\t\t\t<ol>\n\t\t\t\t{\n\t\t\t\t\tcategories.map(category => (\n\t\t\t\t\t\t<GifGrid\n\t\t\t\t\t\t\tkey={ category }\n\t\t\t\t\t\t\tcategory={ category }/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ol>\n\t\t</>\n\t)\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n// React.StrictMode esta para que react sea quisquilloso en algunas cosas\n\nReactDOM.render( <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}